apiVersion: v1
kind: Namespace
metadata:
  name: etykiety
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pg-pv
  namespace: etykiety
spec:
  capacity:
    storage: 2Gi
  accessModes: ["ReadWriteOnce"]
  hostPath:
    path: /var/snap/microk8s/common/default-storage/pgdata
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pg-pvc
  namespace: etykiety
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: etykiety
spec:
  replicas: 1
  selector:
    matchLabels: { app: postgres }
  template:
    metadata:
      labels: { app: postgres }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          env:
            - { name: POSTGRES_DB, value: etykiety }
            - { name: POSTGRES_USER, value: ety }
            - { name: POSTGRES_PASSWORD, value: ety }
          ports: [{ containerPort: 5432 }]
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: pg-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: etykiety
spec:
  selector: { app: postgres }
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: etykiety
  namespace: etykiety
spec:
  replicas: 1
  selector:
    matchLabels: { app: etykiety }
  template:
    metadata:
      labels: { app: etykiety }
    spec:
      containers:
        - name: api
          image: etykiety:0.1.0 # zbuduj lokalnie i za≈Çaduj do microk8s: `microk8s ctr image import etykiety_0.1.0.tar`
          imagePullPolicy: IfNotPresent
          env:
            - name: DATABASE_URL
              value: postgresql+asyncpg://ety:ety@postgres:5432/etykiety
          ports: [{ containerPort: 8000 }]
---
apiVersion: v1
kind: Service
metadata:
  name: etykiety-svc
  namespace: etykiety
spec:
  selector: { app: etykiety }
  ports:
    - port: 80
      targetPort: 8000
      protocol: TCP
      name: http
  type: ClusterIP
